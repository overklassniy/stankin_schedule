from datetime import datetime, timedelta
from typing import List, Union

import camelot
import numpy as np
import pandas as pd


def fix_labs(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ, –æ–±—ä–µ–¥–∏–Ω—è—è —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.

    Args:
        df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏.

    Returns:
        pd.DataFrame: DataFrame —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏.
    """
    # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é DataFrame, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    df_copy = df.copy()

    # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ NaN
    df_copy.replace('', np.nan, inplace=True)

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º DataFrame
    for i in range(1, len(df_copy)):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ –ø—É—Å—Ç–∞
        if pd.isna(df_copy.iloc[i, 0]):
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
            for j in range(1, len(df_copy.columns)):
                if pd.notna(df_copy.iloc[i, j]):
                    df_copy.iloc[i - 1, j] = df_copy.iloc[i - 1, j] + '\n' + df_copy.iloc[i, j]
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É NaN
            df_copy.iloc[i] = np.nan

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–º–∏
    df_copy = df_copy.dropna(how='all')

    # –ó–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è NaN –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df_copy.replace(np.nan, '', inplace=True)

    return df_copy


def parse_pdf(file_path: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç PDF-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

    Args:
        file_path (str): –ü—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É.

    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–ø–∏—Å–∫–∏ –∑–∞–Ω—è—Ç–∏–π.
    """
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ PDF —Ñ–∞–π–ª–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    tables = camelot.read_pdf(file_path, pages='all')

    # –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    table = fix_labs(tables[0].df)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_ = table.iloc[1:8].stack().tolist()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule = {}
    days_of_week = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    current_day = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    for item in schedule_:
        if item in days_of_week:
            current_day = item
            schedule[current_day] = []
        elif current_day:
            if not item:
                schedule[current_day].append(item)
                continue
            item_ = item.replace('\n', ' ').strip().rstrip().replace('. ', '\n')
            if item_.count(']') > 1:
                item__ = []
                for x in item_.split(']'):
                    tmp = (x + ']\n').strip()
                    if tmp != ']':
                        item__.append(tmp)
            else:
                item__ = item_.replace('] ', ']\n').strip()
            schedule[current_day].append(item__)

    return schedule


def parse_date_range(date_range: str, increment_day: int = 0) -> list:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç.

    Args:
        date_range (str): –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–∞–º–∏.
        increment_day (int, optional): –ß–∏—Å–ª–æ –¥–Ω–µ–π –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –¥–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0).

    Returns:
        list: –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç.
    """
    today = datetime.today() + timedelta(increment_day)
    day, month = today.day, today.month

    def is_within_period(start: str, end: str, after_week: bool = False) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–µ—Ä–∏–æ–¥–∞.

        Args:
            start (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º'.
            end (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º'.
            after_week (bool): –§–ª–∞–≥ –¥–ª—è –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (—á—ë—Ç–Ω–∞—è/–Ω–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª–∏).

        Returns:
            bool: True, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ø–µ—Ä–∏–æ–¥.
        """
        start_day, start_month = map(int, start.split('.'))
        end_day, end_month = map(int, end.split('.'))

        start_date = datetime(today.year, start_month, start_day)
        end_date = datetime(today.year, end_month, end_day)
        if end_date < start_date:
            end_date = datetime(today.year + 1, end_month, end_day)  # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–µ—Ü –≥–æ–¥–∞

        if after_week:
            if start_date <= today <= end_date:
                return (today - start_date).days % 14 == 0
        else:
            return start_date <= today <= end_date

    date_parts = date_range.split(', ')
    valid_dates = []

    for part in date_parts:
        if '-' in part:
            if '–∫.–Ω.' in part:
                part = part.replace(' –∫.–Ω.', '')
                start_date, end_date = part.split('-')
                if is_within_period(start_date, end_date):
                    valid_dates.append(part)
            elif '—á.–Ω.' in part:
                part = part.replace(' —á.–Ω.', '')
                start_date, end_date = part.split('-')
                if is_within_period(start_date, end_date, after_week=True):
                    valid_dates.append(part)
        else:
            if '.' in part:
                d, m = map(int, part.split('.'))
                if d == day and m == month:
                    valid_dates.append(part)

    return valid_dates


def get_today_schedule(schedule: dict, increment_day: int = 0) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å.

    Args:
        schedule (dict): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–Ω–µ–π.
        increment_day (int, optional): –ß–∏—Å–ª–æ –¥–Ω–µ–π –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –¥–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0).

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    """
    today = (datetime.today() + timedelta(increment_day)).strftime('%A')
    day_map = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    today_rus = day_map[today]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∫–∞–∫ –ø—É—Å—Ç–æ–≥–æ
    today_schedule = []

    if today_rus in schedule:
        day_schedule = schedule[today_rus]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        for lesson in day_schedule:
            if isinstance(lesson, list):
                found_valid = []
                for sublesson in lesson:
                    lines = sublesson.split('\n')
                    dates_line = lines[-1].strip('[]')
                    if parse_date_range(dates_line, increment_day):
                        found_valid.append(sublesson)
                if not found_valid:
                    today_schedule.append("–û–∫–Ω–æ")  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                else:
                    if len(found_valid) == 1:
                        today_schedule.append(found_valid[0])
                    else:
                        today_schedule.append(found_valid)
            else:
                lines = lesson.split('\n')
                dates_line = lines[-1].strip('[]')
                if parse_date_range(dates_line, increment_day):
                    today_schedule.append(lesson)
                else:
                    today_schedule.append("–û–∫–Ω–æ")  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

    return today_schedule


def format_lesson(lesson_info: List[str], times: List[str], time_counter: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ –≤ –±–ª–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        lesson_info (List[str]): –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ –ø–∞—Ä–µ.
        times (List[str]): –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–∞—Ä.
        time_counter (int): –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ.
    """
    name = 'üìö ' + lesson_info[0]
    if lesson_info[1] not in ['–ª–µ–∫—Ü–∏–∏', '—Å–µ–º–∏–Ω–∞—Ä', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è']:
        prepod = f'üë§ {lesson_info[1]}.'
        lesson_type = f'‚öôÔ∏è {lesson_info[2]}'
    else:
        prepod = None
        lesson_type = '‚öôÔ∏è ' + lesson_info[1]
    lesson_type = lesson_type.replace('–ª–µ–∫—Ü–∏–∏', '–ª–µ–∫—Ü–∏—è')

    try:
        location_number = int(lesson_info[-2])
        location = f'üìç –ö–∞–±. {lesson_info[-2]}'
    except ValueError:
        location = f'üìç {lesson_info[-2]}'

    duration = f'üóì {lesson_info[-1].replace("[", "").replace("]", "").replace("-", " - ")}'
    time = f'‚è∞ {times[time_counter]}'

    if '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è' in lesson_type:
        subgroup = f'üóÇ –ì—Ä—É–ø–ø–∞: {lesson_info[-3].replace(")", "").replace("(", "")}'
        time = f'‚è∞ {times[time_counter].split(" - ")[0]} - {times[time_counter + 1].split(" - ")[-1]}'
    else:
        subgroup = None

    args = [name, prepod, lesson_type, subgroup, location, duration, time]
    return f'<blockquote>{chr(10).join(arg for arg in args if arg)}</blockquote>'


def create_message(today_schedule: List[Union[str, List[str]]], increment_day: int = 0, scheduled: bool = True) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –¥–µ–Ω—å.

    Args:
        today_schedule (List[Union[str, List[str]]]): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å.
        increment_day (int, optional): –°–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0).
        scheduled (bool, optional): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–∏–ø —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True).

    Returns:
        str: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    date_ = datetime.today() + timedelta(increment_day)
    today = date_.strftime('%A')

    if today == 'Sunday':
        return '–í—ã—Ö–æ–¥–Ω–æ–π'

    date = date_.strftime('%d.%m')
    day_map = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    times = ['8:30 - 10:10', '10:20 - 12:00', '12:20 - 14:00', '14:10 - 15:50',
             '16:00 - 17:40', '18:00 - 19:30', '19:40 - 21:10', '21:20 - 22:50']

    today_rus = day_map[today]

    if scheduled:
        message = f'<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–µ–≥–æ–¥–Ω—è {today_rus.lower()}. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n'
    else:
        today_rus_modified = today_rus[:-1] + '—É' if today_rus.endswith('–∞') else today_rus
        message = f'<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today_rus_modified.lower()} ({date}):</b>\n'

    lessons = []
    time_counter = 0

    for lesson in today_schedule:
        if lesson == '–û–∫–Ω–æ':
            time_counter += 1
            continue

        if isinstance(lesson, list):
            for sublesson in lesson:
                if sublesson == '–û–∫–Ω–æ':
                    continue
                lessons.append(format_lesson(sublesson.split('\n'), times, time_counter))
            continue

        lessons.append(format_lesson(lesson.split('\n'), times, time_counter))
        time_counter += 1

    message += '\n'.join(lessons)
    return message
